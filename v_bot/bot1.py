import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, WebAppInfo
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7621000610:AAHgzBhpQ2xjaZFbqLrOMiJvPSM2AxOJHsY"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

dp.include_router(router)



# –°—á–µ—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
likes = 0
dislikes = 0

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule")
    builder.button(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥–∏–∫–∏", callback_data="show_methods") 
    builder.button(text="üîî –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data="show_bell_schedule")
    builder.button(text="üìä –û–ø—Ä–æ—Å", callback_data="start_poll")
    return builder.as_markup()

# –û–ø—Ä–æ—Å
def get_poll_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="poll_like"),
             InlineKeyboardButton(text="üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="poll_dislike")]
        ]
    )

@dp.callback_query(F.data == "start_poll")
async def poll_callback(call: types.CallbackQuery):
    await call.message.answer("–ö–∞–∫ –≤–∞–º –±–æ—Ç? –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤!", reply_markup=get_poll_keyboard())
    await call.answer()

@dp.callback_query(F.data.in_(["poll_like", "poll_dislike"]))
async def poll_feedback(call: types.CallbackQuery):
    global likes, dislikes
    
    if call.data == "poll_like":
        likes += 1
        text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üòä\nüëç –õ–∞–π–∫–æ–≤: {likes} | üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
    else:
        dislikes += 1
        text = f"–ú—ã —É—á—Ç—ë–º –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –±–æ—Ç! üòî\nüëç –õ–∞–π–∫–æ–≤: {likes} | üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
    
    await call.message.answer(text)
    await call.answer()

@dp.message(Command("start", "main", "hello"))
async def start_command(message: types.Message):
    user = message.from_user
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–¢–≤–æ–π ID: {user.id}\n"
    if user.username:
        text += f"–¢–≤–æ–π username: @{user.username}"
    await message.answer(text, reply_markup=get_main_menu())


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
def get_file_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª 1")],
            [KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª 2")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("app"))
async def start_web(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±", web_app=WebAppInfo(url="https://docs.aiogram.dev/en/v3.18.0/"))]
        ],
        resize_keyboard=True
    )
    
    # –û—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)

# –§–∞–π–ª—ã
@dp.message(Command("files"))
async def send_file_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", reply_markup=get_file_menu())

@dp.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª 1")
async def send_file1(message: types.Message):
    file_path = "documents/file1.docx"
    await message.answer_document(FSInputFile(file_path), caption="–í–æ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç üìÑ")

@dp.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª 2")
async def send_file2(message: types.Message):
    file_path = "documents/file2.docx"
    await message.answer_document(FSInputFile(file_path), caption="–í–æ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç üìÑ")

# /start
@dp.message(Command("start", "main", "hello"))
async def start_command(message: types.Message):
    user = message.from_user
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–¢–≤–æ–π ID: {user.id}\n"
    if user.username:
        text += f"–¢–≤–æ–π username: @{user.username}"
    await message.answer(text, reply_markup=get_main_menu())

# /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("<b>help</b> <em><u>information</u></em>", parse_mode="HTML")

# /site
@dp.message(Command("site"))
async def site_command(message: types.Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://donstu.ru/university/...")]
        ]
    )
    await message.answer("üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:", reply_markup=markup)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(F.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def greet_user(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòä", reply_markup=get_main_menu())

@dp.message(F.text == "–°–ò–°-31")
async def send_schedule_sis31(message: types.Message):
    await message.answer_photo(FSInputFile("assets/f1.jpg"), caption="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

@dp.message(F.text == "–°–ò–°-32")
async def send_schedule_sis32(message: types.Message):
    await message.answer_photo(FSInputFile("assets/F2.jpg"), caption="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.in_(["show_schedule", "show_methods", "show_bell_schedule"]))
async def callback_handler(call: types.CallbackQuery):
    if call.data == "show_schedule":
        text = (
            "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:*\n"
            "üïò 08:00 - 09:30 | –ü–∞—Ä–∞ 1\n"
            "üïô 09:45 - 11:15 | –ü–∞—Ä–∞ 2\n"
            "üïõ 11:30 - 13:00 | –ü–∞—Ä–∞ 3\n"
            "üïë 13:45 - 15:15 | –ü–∞—Ä–∞ 4\n"
            "üïí 15:30 - 17:00 | –ü–∞—Ä–∞ 5\n"
        )
    elif call.data == "show_methods":
        text = (
            "üìñ *–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n"
            "1Ô∏è‚É£ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "2Ô∏è‚É£ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "3Ô∏è‚É£ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ SQL\n"
            "4Ô∏è‚É£ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
            "5Ô∏è‚É£ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        )
    else:
        text = (
            "üîî *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:*\n"
            "üïò 08:00 - 09:30 | 1-—è –ø–∞—Ä–∞\n"
            "üïô 09:45 - 11:15 | 2-—è –ø–∞—Ä–∞\n"
            "üïõ 11:30 - 13:00 | 3-—è –ø–∞—Ä–∞\n"
            "üïë 13:45 - 15:15 | 4-—è –ø–∞—Ä–∞\n"
            "üïí 15:30 - 17:00 | 5-—è –ø–∞—Ä–∞\n"
        )

    await call.message.answer(text, parse_mode="Markdown")
    await call.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
